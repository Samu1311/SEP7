@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<nav class="navbar navbar-expand-lg bg-primary">
    <a class="navbar-brand" href="/">
        Gjensidige
        <img src="images/gjensidige-logo.png" alt="Gjensidige Logo" class="brand-logo" />
    </a>

    <!-- Toggler for Mobile View -->
    <button
        class="navbar-toggler"
        type="button"
        @onclick="ToggleNavbar"
        aria-controls="navbarNav"
        aria-expanded="@isNavbarExpanded.ToString().ToLower()"
        aria-label="Toggle navigation"
    >
        <span class="navbar-toggler-icon"></span>
    </button>

    <!-- Navbar Links -->
    <div class="collapse navbar-collapse @(isNavbarExpanded ? "show" : "")" id="navbarNav">
        <ul class="navbar-nav ms-auto">
            <li class="nav-item">
                <NavLink class="nav-link" href="/about-us" Match="NavLinkMatch.All">About</NavLink>
            </li>
            <AuthorizeView>
                <Authorized>
                    <li class="nav-item">
                        <NavLink class="nav-link" href="/AIform">AI Form</NavLink>
                    </li>
                </Authorized>
            </AuthorizeView>
            <AuthorizeView>
                <Authorized>
                    <li class="nav-item">
                        <button class="nav-link btn btn-link" @onclick="LogOut">Log Out</button>
                    </li>
                </Authorized>
                <NotAuthorized>
                    <li class="nav-item">
                        <NavLink class="nav-link" href="/login">Log In</NavLink>
                    </li>
                </NotAuthorized>
            </AuthorizeView>
        </ul>
    </div>
</nav>

@code {
    private bool isNavbarExpanded = false;

    private void ToggleNavbar()
    {
        isNavbarExpanded = !isNavbarExpanded;
    }

    private async Task LogOut()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        AuthenticationStateProvider.MarkUserAsLoggedOut();
        NavigationManager.NavigateTo("/");
    }
}