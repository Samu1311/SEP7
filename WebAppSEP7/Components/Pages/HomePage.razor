@page "/"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CustomAuthenticationStateProvider AuthProvider
@inject IHttpClientFactory HttpClientFactory
@using System.Security.Claims

<AuthorizeView>
    <Authorized>
        <div class="yellow-ribbon">
            <p>Welcome, @userName!</p>
        </div>
    </Authorized>
</AuthorizeView>

<div class="hero-section">
    <div class="hero-content">
        <h1>Welcome to Gjensidige Personalized Insurance</h1>
        <p>Take control of your health with tailored insurance packages based on advanced AI analysis.</p>
        <button class="cta-button" @onclick="NavigateToLogin">Get Started</button>
    </div>
</div>

<div class="features-section">
    <div class="feature">
        <h2>Personalized Insurance</h2>
        <p>Receive packages tailored to your unique health profile.</p>
    </div>
    <div class="feature">
        <h2>AI Health Analysis</h2>
        <p>Our AI evaluates your health data for accurate insights.</p>
    </div>
    <div class="feature">
        <h2>24/7 Support</h2>
        <p>Get assistance from our experts anytime you need it.</p>
    </div>
</div>

<div class="survey-section">
    <h2>Start Your Health Journey</h2>
    <p>Fill out a quick survey and upload your medical records to get your personalized insurance plan.</p>
    <button class="cta-button" @onclick="NavigateToSurvey">Start Now</button>
</div>

<footer class="footer">
    <p>© 2024 Gjensidige. All rights reserved.</p>
    <ul>
        <li><a href="/AIdescription">Terms of Service</a></li>
        <li><a href="/HealthData">Privacy Policy</a></li>
        <li><a href="/contact-us">Contact Us</a></li>
    </ul>
</footer>

@code {
    private string userName;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        await UpdateUserName();
    }

    private async Task UpdateUserName()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userName = user.FindFirst(c => c.Type == ClaimTypes.GivenName)?.Value;
        }
        else
        {
            userName = null;
        }

        StateHasChanged();
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
            await UpdateUserName();
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void NavigateToSurvey()
    {
        NavigationManager.NavigateTo("/recommendation");
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}